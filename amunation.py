from abc import abstractmethod
from random import randint;
from enum import Enum;

class WeaponTypeValue:
    """Class that represents a detailed weapon type value.
    """
    def __init__(self, id: int, description_en: str, description_fr: str) -> None:
        """Weapon Type Value Construtor.

        Args:
            id (int): ID of the weapon type value.
            description_en (str): English description.
            description_fr (str): French description.
        """
        self.__id: int = id;
        self.__description_en: str = description_en;
        self.__description_fr: str = description_fr;
        
    def get_id(self) -> int:
        """Get the weapon type value identifier.

        Returns:
            int: The identifier.
        """
        return self.__id;
    
    def get_description_fr(self) -> str:
        """Get the french description.

        Returns:
            str: The french description.
        """
        return self.__description_fr;

    def get_description_en(self) -> str:
        """Get the english description.

        Returns:
            str: The english description.
        """
        return self.__description_fr;

class WeaponType(Enum):
    """Enumeration that represents all available weapon types.

    Args:
        Enum: Enumeration
    """
    ONE_HAND_SWORD=WeaponTypeValue(id=1, description_en="One Hand Sword", description_fr="Epée à une main");
    TWO_HANDS_SWORD=WeaponTypeValue(id=2, description_fr="Epée à deux mains", description_en="Two Hands Sword");
    ONE_HAND_AXE=WeaponTypeValue(3, description_fr="Hache à une main", description_en="One Hand Axe");
    TWO_HANDS_AXE=WeaponTypeValue(4, "Two hands axe", description_fr="Hace à deux mains");
    ONE_HAND_MACE=WeaponTypeValue(5, "Mace à une main", description_fr="One Hand Mace");
    TWO_HANDS_MACE=WeaponTypeValue(6, "Mace à deux mains", description_fr="Two Hands Mace");
    STAFF=WeaponTypeValue(7, "Staff", description_fr="Batton");
    BOW=WeaponTypeValue(8, "Bow", description_fr="Arc");
    CROSSBOW=WeaponTypeValue(8, "Crossbow", description_fr="Arbalète");

class Projectile:
    """Class that represents a projectile tha must use remote weapons like bow and crossbow.
    """
    def __init__(self) -> None:
        """Projectile Constructor.
        """
        pass

class Weapon:
    """
    Class that represents a weapon that can be used by players and can be dropped on killed trashs or in vault.
    """
    
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, type: WeaponType, critical_rate: float, speed: float):
        """Weapon Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            type (WeaponType): The type of the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        self._name: str = name;
        self._damage_min: int = damage_min;
        self._damage_max: int = damage_max;
        self._required_level: int = required_level;
        self._type: WeaponType = type;
        self._critical_rate: float = critical_rate;
        self._speed: float = speed;

    def get_speed(self) -> float:
        """Get weapon's speed.

        Returns:
            float: The speed.
        """
        return self._speed;

    def get_damage_min(self) -> int:
        """Get damage min that can inflict the weapon.

        Returns:
            int: Minimal damage.
        """
        return self._damage_min;

    def get_damage_max(self) -> int:
        """Get damage max that can inflict the weapon.

        Returns:
            int: Maximal damage.
        """
        return self._damage_max;

    def __can_generate_critical_damage(self) -> bool:
        """Function that check if a critical damage can be used.

        Returns:
            bool: True if damage can be used, else False.
        """
        chance: int = randint(0, 100);
        return True if (chance <= self._critical_rate) else False;

    def inflict_damage(self) -> int:
        """Function that generate damage to inflict a the target.
        It's using __damage_min, __damage_max to generate damage.

        Returns:
            int: Damage generated by the weapon.
        """
        damage: int = randint(self._damage_min, self._damage_max);
        can_critical: bool = self.__can_generate_critical_damage();
        return damage*3 if (can_critical) else damage;

class Sword(Weapon):
    """Class that represents a Sword.

    Args:
        Weapon (Weapon): Sword is a Weapon type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, type: WeaponType, critical_rate: float, speed: float):
        """Sword Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            type (WeaponType): The type of the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Weapon.__init__(self, name, damage_min, damage_max, required_level, type, critical_rate, speed);

class OneHandSword(Sword):
    """Class that represents an One Hand Sword.

    Args:
        Sword (Sword): OneHandSword is a Sword type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """OneHandSword Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Sword.__init__(self, name, damage_min, damage_max, required_level, WeaponType.ONE_HAND_SWORD, critical_rate, speed);

    def inflict_damage(self) -> int:
        damage = super().inflict_damage();
        return damage

class TwoHandsSword(Sword):
    """Class that represents a Two Hands Sword.

    Args:
        Sword (Sword): TwoHandsSword is a Sword type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """TwoHandsSword Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Sword.__init__(self, name, damage_min, damage_max, required_level, WeaponType.TWO_HANDS_SWORD, critical_rate, speed);

class Axe(Weapon):
    """Class that represents a Axe.

    Args:
        Weapon (Weapon): Axe is a Weapon type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, type: WeaponType, critical_rate: float, speed: float):
        """Axe Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            type (WeaponType): The type of the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Weapon.__init__(self, name, damage_min, damage_max, required_level, type, critical_rate, speed);

class OneHandAxe(Axe):
    """Class that represents an One Hand Axe.

    Args:
        Axe (Axe): OneHandAxe is a Axe type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """OneHandAxe Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Axe.__init__(self, name, damage_min, damage_max, required_level, WeaponType.ONE_HAND_AXE, critical_rate, speed);

    def inflict_damage(self) -> int:
        damage = super().inflict_damage();
        return damage

class TwoHandsAxe(Axe):
    """Class that represents a Two Hands Axe.

    Args:
        Axe (Axe): TwoHandsAxe is a Axe type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """TwoHandsAxe Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Axe.__init__(self, name, damage_min, damage_max, required_level, WeaponType.TWO_HANDS_AXE, critical_rate, speed);

class Mace(Weapon):
    """Class that represents a Mace.

    Args:
        Weapon (Weapon): Mace is a Weapon type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, type: WeaponType, critical_rate: float, speed: float):
        """Mace Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            type (WeaponType): The type of the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Weapon.__init__(self, name, damage_min, damage_max, required_level, type, critical_rate, speed);

class OneHandMace(Mace):
    """Class that represents an One Hand Mace.

    Args:
        Mace (Mace): OneHandMace is a Mace type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """OneHandMace Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Mace.__init__(self, name, damage_min, damage_max, required_level, WeaponType.ONE_HAND_MACE, critical_rate, speed);

    def inflict_damage(self) -> int:
        damage = super().inflict_damage();
        return damage

class TwoHandsMace(Mace):
    """Class that represents a Two Hands Mace.

    Args:
        Mace (Mace): TwoHandsMace is a Mace type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """TwoHandsMace Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Mace.__init__(self, name, damage_min, damage_max, required_level, WeaponType.TWO_HANDS_MACE, critical_rate, speed);

class Staff(Weapon):
    """Class that represents a Staff.

    Args:
        Weapon (Weapon): Staff is a Weapon type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """Staff Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Weapon.__init__(self, name, damage_min, damage_max, required_level, WeaponType.STAFF, critical_rate, speed);

class Bow(Weapon):
    """Class that represents a Bow.

    Args:
        Weapon (Weapon): Bow is a Weapon type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """Bow Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Weapon.__init__(self, name, damage_min, damage_max, required_level, WeaponType.BOW, critical_rate, speed);

    def fire(self, projectile: Projectile):
        """Fire the given projectil.

        Args:
            projectile (Projectile): The projectile use to damage target.
        """
        pass;

class Crossbow(Bow):
    """Class that represents a Crossbow.

    Args:
        Bow (Bow): Crossbow is a Bow type base.
    """
    def __init__(self, name: str, damage_min: int, damage_max: int, required_level: int, critical_rate: float, speed: float):
        """Bow Constructor.

        Args:
            name (str): The name of the weapon.
            damage_min (int): The minimal damage inflicted by the weapon.
            damage_max (int): The maximal damage inflicted by the weapon.
            required_level (int): The minimal required player's level to use the weapon.
            critical_rate (float): The critical rate of the weapon.
            speed (float): The speed of the weapon.
        """
        Bow.__init__(self, name, damage_min, damage_max, required_level, WeaponType.CROSSBOW, critical_rate, speed);

class WeaponBuilder:
    """Class that represents a Generic Weapon Builder.
    """
    def __init__(self, type: WeaponType) -> None:
        """WeaponBuilder Constructor.

        Args:
            type (WeaponType): The weapon's type.
        """
        self._name: str = None;
        self._damage_min: int = 0;
        self._damage_max: int = 0;
        self._required_level: int = 0;
        self._type: WeaponType = type;
        self._critical_rate: float = 0.0;
        self._speed: float = 0.0;
    
    @staticmethod
    def create_builder(type: WeaponType):
        """Create a builder for the specicfic weapon type generation.

        Args:
            type (WeaponType): The type of the weapon to build.

        Returns:
            WeaponBuilder: The right implementation of the WeaponBuilder to use.
        """
        builder = None;
        match (type):
            case WeaponType.ONE_HAND_SWORD:
                builder = OneHandSwordBuilder();
            case WeaponType.TWO_HANDS_SWORD:
                builder = TwoHandsSwordBuilder();
            case WeaponType.ONE_HAND_AXE:
                builder = OneHandAxeBuilder();
            case WeaponType.TWO_HANDS_AXE:
                builder = TwoHandsAxeBuilder();
            case WeaponType.ONE_HAND_MACE:
                builder = OneHandMaceBuilder();
            case WeaponType.TWO_HANDS_MACE:
                builder = TwoHandsMaceBuilder();
            case WeaponType.STAFF:
                builder = StaffBuilder();
            case WeaponType.BOW:
                builder = BowBuilder();
            case WeaponType.CROSSBOW:
                builder = CrossbowBuilder();
            case _:
                builder = WeaponBuilder(type);

        return builder;
    
    def with_name(self, name: str):
        """Define the name of the weapon.

        Args:
            name (str): Weapon's name.

        Returns:
            WeaponBuilder: Updated builder.
        """
        self._name = name;
        return self;
    
    def with_damage_min(self, damage_min: int):
        """Define the minimal damage of the weapon.

        Args:
            damage_min (int): Weapon's minimal damage.

        Returns:
            WeaponBuilder: Updated builder.
        """
        self._damage_min = damage_min;
        return self;
    
    def with_damage_max(self, damage_max: int):
        """Define the maximal damage of the weapon.

        Args:
            damage_max (int): Weapon's maximal damage.

        Returns:
            WeaponBuilder: Updated builder.
        """
        self._damage_max = damage_max;
        return self;
    
    def with_required_level(self, required_level: int):
        """Define the minimal required level to use the weapon.

        Args:
            required_level (int): Minimal required level to use the weapon.

        Returns:
            WeaponBuilder: Updated builder.
        """
        self._required_level = required_level;
        return self;
    
    def with_critical_rate(self, critical_rate: float):
        """Define the critical rate of the weapon.

        Args:
            critical_rate (float): Critical rate of the weapon.

        Returns:
            WeaponBuilder: Updated builder.
        """
        self._critical_rate = critical_rate;
        return self;
    
    def with_speed(self, speed: float):
        """Define the attack's speed of the weapon.

        Args:
            speed (float): Speed of the weapon.

        Returns:
            WeaponBuilder: Updated builder.
        """
        self._speed = speed;
        return self;

    @abstractmethod
    def build(self) -> Weapon:
        """Build the weapon.

        Returns:
            Weapon: The builded weapon.
        """
        raise Exception("Not yet implemented.");
    
class OneHandSwordBuilder(WeaponBuilder):
    """Class that represents a One Hand Sword Builder.

    Args:
        WeaponBuilder (WeaponBuilder): OneHandSwordBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """OneHandSwordBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.ONE_HAND_SWORD);
    
    def build(self) -> Weapon:
        return OneHandSword(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class TwoHandsSwordBuilder(WeaponBuilder):
    """Class that represents a Two Hands Sword Builder.

    Args:
        WeaponBuilder (WeaponBuilder): TwoHandsSwordBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """TwoHandsSwordBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.TWO_HANDS_SWORD);
    
    def build(self) -> Weapon:
        return TwoHandsSword(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class OneHandAxeBuilder(WeaponBuilder):
    """Class that represents a One Hand Axe Builder.

    Args:
        WeaponBuilder (WeaponBuilder): OneHandAxeBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """OneHandAxeBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.ONE_HAND_AXE);
    
    def build(self) -> Weapon:
        return OneHandAxe(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class TwoHandsAxeBuilder(WeaponBuilder):
    """Class that represents a Two Hands Axe Builder.

    Args:
        WeaponBuilder (WeaponBuilder): TwoHandsAxeBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """TwoHandsAxeBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.TWO_HANDS_AXE);
    
    def build(self) -> Weapon:
        return TwoHandsAxe(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class OneHandMaceBuilder(WeaponBuilder):
    """Class that represents a One Hand Mace Builder.

    Args:
        WeaponBuilder (WeaponBuilder): OneHandMaceBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """OneHandMaceBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.ONE_HAND_MACE);
    
    def build(self) -> Weapon:
        return OneHandMace(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class TwoHandsMaceBuilder(WeaponBuilder):
    """Class that represents a Two Hands Mace Builder.

    Args:
        WeaponBuilder (WeaponBuilder): TwoHandsMaceBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """TwoHandsMaceBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.TWO_HANDS_MACE);
    
    def build(self) -> Weapon:
        return TwoHandsMace(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class StaffBuilder(WeaponBuilder):
    """Class that represents a Staff Builder.

    Args:
        WeaponBuilder (WeaponBuilder): StaffBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """StaffBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.STAFF);
    
    def build(self) -> Weapon:
        return Staff(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class BowBuilder(WeaponBuilder):
    """Class that represents a Bow Builder.

    Args:
        WeaponBuilder (WeaponBuilder): BowBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """BowBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.BOW);
    
    def build(self) -> Weapon:
        return Bow(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);

class CrossbowBuilder(WeaponBuilder):
    """Class that represents a Bow Builder.

    Args:
        WeaponBuilder (WeaponBuilder): CrossbowBuilder is a WeaponBuilder type base.
    """
    def __init__(self) -> None:
        """CrossbowBuilder Constructor.
        """
        WeaponBuilder.__init__(self, WeaponType.CROSSBOW);
    
    def build(self) -> Weapon:
        return Crossbow(self._name, self._damage_min, self._damage_max, self._required_level, self._critical_rate, self._speed);
